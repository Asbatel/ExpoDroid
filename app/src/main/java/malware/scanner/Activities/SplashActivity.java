package malware.scanner.Activities;

import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Looper;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.widget.ProgressBar;
import android.widget.Toast;

import com.github.ybq.android.spinkit.sprite.Sprite;
import com.github.ybq.android.spinkit.style.DoubleBounce;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.HashMap;

import malware.scanner.Exceptions.HttpResponseException;
import malware.scanner.Handler.HttpHandler;
import malware.scanner.R;
import malware.scanner.Tasks.HashCreator;
import malware.scanner.Utils.Constants;
import malware.scanner.Utils.SharedPreferencesUtils;

import static android.Manifest.permission.READ_EXTERNAL_STORAGE;
import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;

public class SplashActivity extends AppCompatActivity {

    private final int PERMISSION_REQUEST_CODE = 123;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_splash);
        ProgressBar progressBar = findViewById(R.id.progressbar);
        Sprite doubleBounce = new DoubleBounce();
        progressBar.setIndeterminateDrawable(doubleBounce);


        if (getIntent().hasExtra(Constants.PATH_TO_APK)) {
            if (arePermissionsGranted()) {
                Log.d(Constants.SCANNER_PREFIX, "setTimer");
                setTimer();
            } else {
                Log.d(Constants.SCANNER_PREFIX, "checkPerm");
                requestPermissionAndContinue();
            }
        } else {
            Toast.makeText(SplashActivity.this, "No APK path attached. Closing...", Toast.LENGTH_SHORT).show();
            SplashActivity.this.finish();
        }
    }

    // Start Malware Activity
    private void goToNext() {
        Intent intent = new Intent(this, MalwareActivity.class);
        startActivity(intent);
    }


    private void checkHash(String hash) throws IOException, HttpResponseException {
        String jsonResult;
        HttpHandler handler = new HttpHandler();
        HashMap postData = new HashMap();
        postData.put("allinfo", Constants.TRUE);
        postData.put("apikey", Constants.API_KEY);
        postData.put("resource", hash);
        jsonResult = handler.sendPostRequest(Constants.SCANNING_FILE_URL, postData);
        SharedPreferencesUtils.setJsonData(jsonResult, SplashActivity.this);
    }

    private File getApkFile() {
        String apkPath = getIntent().getStringExtra(Constants.PATH_TO_APK);
        return new File(apkPath);
    }


    private void setTimer() {
        Thread timer = new Thread() {
            public void run() {
                // Copy apk to accessible location
                File apkFile = getApkFile();
                File newApkFile = new File(getExternalFilesDir(null) + File.pathSeparator + Constants.CHECK_APK_NAME);

                try {
                    copy(apkFile, newApkFile);
                } catch (IOException e) {
                    e.printStackTrace();
                }

                //Create and check hash
                String hash = HashCreator.createHash(newApkFile);
                try {
                    checkHash(hash);
                } catch (final IOException | HttpResponseException e) {
                    e.printStackTrace();
                    Log.e(Constants.SCANNER_PREFIX, "Exception while checking hash!", e);
                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            Toast.makeText(SplashActivity.this, "Could not retrieve information from VirusTotal!", Toast.LENGTH_SHORT).show();
                            finish();
                        }
                    });
                    return;
                }


                try {
                    sleep(500);
                } catch (final InterruptedException e) {
                    Log.e(Constants.SCANNER_PREFIX, "Thread interrupted, closing app!");
                    finish();
                    return;
                }
                goToNext();
            }
        };

        timer.start();
    }

    private boolean arePermissionsGranted() {
        return ContextCompat.checkSelfPermission(this, WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED
                && ContextCompat.checkSelfPermission(this, READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
    }

    private void requestPermissionAndContinue() {
        if (ContextCompat.checkSelfPermission(this, WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED
                && ContextCompat.checkSelfPermission(this, READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {

            ActivityCompat.requestPermissions(SplashActivity.this, new String[]{WRITE_EXTERNAL_STORAGE,
                    READ_EXTERNAL_STORAGE}, PERMISSION_REQUEST_CODE);

        } else {
            setTimer();
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
                                           @NonNull int[] grantResults) {

        if (requestCode == PERMISSION_REQUEST_CODE) {
            if (permissions.length > 0 && grantResults.length > 0) {

                boolean flag = true;
                for (int i = 0; i < grantResults.length; i++) {
                    if (grantResults[i] != PackageManager.PERMISSION_GRANTED) {
                        flag = false;
                    }
                }
                if (flag) {
                    setTimer();
                } else {
                    finish();
                }

            } else {
                finish();
            }
        } else {
            super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        }
    }

    private void copy(File src, File dst) throws IOException {
        try (InputStream in = new FileInputStream(src)) {
            try (OutputStream out = new FileOutputStream(dst)) {
                // Transfer bytes from in to out
                byte[] buf = new byte[1024];
                int len;
                while ((len = in.read(buf)) > 0) {
                    out.write(buf, 0, len);
                }
            }
        }
    }
}
