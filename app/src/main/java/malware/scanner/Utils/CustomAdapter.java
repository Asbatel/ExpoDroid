package malware.scanner.Utils;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.support.v4.content.ContextCompat;
import android.support.v4.widget.ImageViewCompat;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.TextView;

import com.google.gson.JsonObject;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

import malware.scanner.R;

public class CustomAdapter extends BaseAdapter {

    private Activity activityContext;
    private ArrayList<String> data;
    private static LayoutInflater inflater=null;
    public Resources res;
    private String detectedResult, operatorResult, updateResult, familyResult;

    public CustomAdapter(Activity activity, ArrayList<String> dataArray, Resources resLocal) {

        activityContext = activity;
        data = dataArray;
        res = resLocal;
        inflater = ( LayoutInflater )activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);

    }

    @Override
    public int getCount() {
        if(data.size()<=0)
            return 1;
        return data.size();
    }

    @Override
    public Object getItem(int position) {
        return position;
    }

    @Override
    public long getItemId(int position) {
        return 0;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        View vi = convertView;
        ViewHolder holder;

        if(convertView==null){
            vi = inflater.inflate(R.layout.list_items, null);
            holder = new ViewHolder();
            holder.malwareOperator= (TextView) vi.findViewById(R.id.malware_operator);
            holder.malwareFamily=(TextView)vi.findViewById(R.id.malware_family);
            holder.malwareUpdate = (TextView)vi.findViewById(R.id.malware_update_date);
            holder.malwareStatusIcon = (ImageView)vi.findViewById(R.id.malware_status_icon);
            holder.malwareViewStatusColor = (View)vi.findViewById(R.id.malware_status_color);
            vi.setTag( holder );

        } else {
            holder=(ViewHolder)vi.getTag();
        }

        if(data.size()>0) {
            StringBuilder stringBuilder = new StringBuilder(data.get(position));
            String json = stringBuilder.substring(0, stringBuilder.indexOf("}-") + 1);
            operatorResult = stringBuilder.substring(stringBuilder.indexOf("}-") + 2);
            displayResult(parseJson(json), holder);

        }

        return vi;
    }

    private String[] parseJson(String json) {
        String [] parsedData = new String[4];
        StringBuilder formattedUpdatedDate = null;

        try {
            JSONObject object = new JSONObject(json);
            detectedResult = object.getString(Constants.JSON_DETECTED);
            familyResult = object.getString(Constants.JSON_FAMILY);
            updateResult = object.getString(Constants.JSON_UPDATE);
            if (!updateResult.equals(Constants.NULL)) {
                formattedUpdatedDate= new StringBuilder(updateResult);
                formattedUpdatedDate.insert(4, '-');
                formattedUpdatedDate.insert(7, "-");
                parsedData = new String[]{operatorResult, detectedResult, familyResult, formattedUpdatedDate.toString()};
            } else {
                parsedData = new String[]{operatorResult, detectedResult, familyResult, Constants.NOTAVAILABLE};
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }

        return parsedData;
    }

    private void displayResult(String [] data, ViewHolder holder) {

        holder.malwareOperator.setText(data[0]);
        if (!data[2].equals(Constants.NULL)) {
            holder.malwareFamily.setText(data[2]);
            holder.malwareFamily.setTextColor(ContextCompat.getColor(activityContext, R.color.black));
        } else {
            holder.malwareFamily.setText(Constants.NOTAVAILABLE);
            holder.malwareFamily.setTextColor(ContextCompat.getColor(activityContext, R.color.gray));
        }
        if (!data[3].equals(Constants.NULL)) {
            holder.malwareUpdate.setText(data[3]);
            holder.malwareUpdate.setTextColor(ContextCompat.getColor(activityContext, R.color.black));
        } else {
            holder.malwareUpdate.setText(Constants.NOTAVAILABLE);
            holder.malwareUpdate.setTextColor(ContextCompat.getColor(activityContext, R.color.gray));
        }

       if (data[1].equals(Constants.TRUE)) {
            holder.malwareViewStatusColor.setBackgroundResource(R.color.red);
            holder.malwareStatusIcon.setImageResource(R.drawable.icon_dangerous);
            holder.malwareStatusIcon.setColorFilter(ContextCompat.getColor(activityContext, R.color.red));
        } else if (data[1].equals(Constants.FALSE)) {
            holder.malwareViewStatusColor.setBackgroundResource(R.color.green);
            holder.malwareStatusIcon.setImageResource(R.drawable.icon_clean);
            holder.malwareStatusIcon.setColorFilter(ContextCompat.getColor(activityContext, R.color.green));
        }
    }

    public static class ViewHolder{

        public TextView malwareUpdate;
        public TextView malwareFamily;
        public TextView malwareOperator;
        public ImageView malwareStatusIcon;
        public View malwareViewStatusColor;

    }
}
