package malware.scanner.Fragments;


import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import malware.scanner.R;
import malware.scanner.Tasks.GetMalwareDetails;
import malware.scanner.Utils.Constants;
import malware.scanner.Utils.SharedPreferencesUtils;


public class MalwareFamilyFragment extends android.support.v4.app.Fragment {

    private TextView malwareFamily;
    private ArrayList<String> malwareFamilyData;

    public MalwareFamilyFragment() {}


    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_malware_family, container, false);
        setAttributes(view);
        checkHash();
        return view;
    }

    private void setAttributes(View view) {
        malwareFamily = (TextView) view.findViewById(R.id.malware_family);
    }

    private void checkHash() {
        try {
            String jsonResult = SharedPreferencesUtils.getJsonData(getContext());
            findFrequent(new GetMalwareDetails().ParseDetails(jsonResult));
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    private void findFrequent(ArrayList<String> data) throws JSONException {
        malwareFamilyData = new ArrayList<String>();
        int max = 1;
        Map.Entry<String, Integer> valo = null;
        for (int i = 0; i < data.size(); i++) {
            StringBuilder stringBuilder = new StringBuilder(data.get(i));
            String json = stringBuilder.substring(0, stringBuilder.indexOf("}-") + 1);
            JSONObject object = new JSONObject(json);
            String familyResult = object.getString(Constants.JSON_FAMILY);
            malwareFamilyData.add(familyResult);
        }

        Map<String, Integer> hm = new HashMap<String, Integer>();

        for (String i : malwareFamilyData) {
            Integer j = hm.get(i);
            hm.put(i, (j == null) ? 1 : j + 1);
        }

        for (Map.Entry<String, Integer> mData : hm.entrySet()) {

            if (mData.getValue() > max && !mData.getKey().equals(Constants.NULL)) {
                max = mData.getValue();
                valo = mData;
            }
        }

        // displaying the winner classification family

        if (valo != null) {
            malwareFamily.setText(valo.getKey());
        } else {
            malwareFamily.setText("None");
        }
    }

}
